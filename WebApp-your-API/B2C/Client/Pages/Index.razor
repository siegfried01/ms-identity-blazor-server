@page "/"
@using Azure.Identity
@using Microsoft.Azure.Cosmos
@using Microsoft.Extensions.Configuration

@inject IConfiguration Configuration

<UserClaims />
<hr />
cosmos URI = @Configuration.GetSection("cosmosConfig")["uri"] = @Configuration["cosmosConfig:uri"]
<table>
    <tr><td><button @onclick="WriteToCosmosUsingManagedIdentity">Write to Cosmos Using Managed Idenity</button></td><td><div style="border:double">@status</div></td></tr>
</table>
<h1>Config</h1>
<table>
    @foreach (var item in Configuration.GetChildren())
    {
        <tr><td>@item.Key</td><td>@item.Value</td></tr>
    }
</table>
<hr />
<h1>Cosmos Config</h1>
<table>
    @foreach (var item in Configuration.GetSection("cosmosConfig").GetChildren())
    {
        <tr><td>@item.Key</td><td>@item.Value</td></tr>
    }
</table>
<hr />
<h1>AADB2C Config</h1>
<table>
    @foreach (var item in Configuration.GetSection("AzureAdB2C").GetChildren())
    {
        <tr><td>@item.Key</td><td>@item.Value</td></tr>
    }
</table>
@code
{
    string status = "Normal";
    async Task WriteToCosmosUsingManagedIdentity()
    {
        var now = DateTime.Now.ToString("yyyy MMMM dd HH:mm:ss.ffff (ddd)");
        var credential = new DefaultAzureCredential();

        var cosmosClient = new CosmosClient(Configuration["CosmosConfig:uri"], credential);
        var container = cosmosClient.GetContainer(Configuration["CosmosConfig:dbName"], Configuration["CosmosConfig:containerName"]);

        var newId = Guid.NewGuid().ToString();
        try
        {
            await container.CreateItemAsync(new { id = newId, partitionKey = newId, name = "Siegfried Heintze" },
            new PartitionKey(newId)/*, cancellationToken: stoppingToken*/);
            status = "Success " + now;
        }
        catch (Exception ex)
        {
            status = now + ":  " + ex.Message;
        }
    }
}